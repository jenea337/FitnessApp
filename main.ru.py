import customtkinter as ctk
import json
from datetime import datetime

ctk.set_appearance_mode("System")
ctk.set_default_color_theme("blue")
app=ctk.CTk()
app.title("Fitness Project")
app.geometry("900x800")
user_data = {}

def save_user_input(gender, weight, height, body_type,age, support=None, activity=None):
    user_data["gender"] = gender
    user_data["weight"] = weight
    user_data["height"] = height
    user_data["body_type"] = body_type
    user_data["support"] = support
    user_data["activity"] = activity
    user_data["age"] = age

    # –û—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —ç–∫—Ä–∞–Ω–∞
    for widget in app.winfo_children():
        widget.destroy()


    show_result_screen()


def calculate_kbju(data):
    gender = data["gender"]
    weight = float(data["weight"])
    height = float(data["height"])
    body_type = data["body_type"]
    activity = data.get("activity")
    goal = data["goal"]
    age = float(data["age"])

    activity_factor = 1.2
    if goal == "–†–µ–ª—å–µ—Ñ":
        if activity == "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å":
            activity_factor = 1.6
        elif activity == "3‚Äì4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é":
            activity_factor = 1.4
        elif activity == "1‚Äì2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é":
            activity_factor = 1.2

    if gender == "–ú—É–∂—á–∏–Ω–∞":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    # –ø–æ–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ç–∏–ø —Ç–µ–ª–∞
    if body_type == "–®–∏—Ä–æ–∫–∞—è –∫–æ—Å—Ç—å":
        bmr *= 1.1
    elif body_type == "–•—É–¥–æ—â–∞–≤—ã–π (—É–∑–∫–∞—è –∫–æ—Å—Ç—å)":
        bmr *= 0.9

    calories = bmr * activity_factor

    if goal == "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
        calories -= 300
    elif goal == "–†–µ–ª—å–µ—Ñ":
        pass
    elif goal == "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã":
        calories = bmr * 1.4

    protein = weight * 2  # –≥ –Ω–∞ 1 –∫–≥ –º–∞—Å—Å—ã
    fat = weight * 1  # –≥ –Ω–∞ 1 –∫–≥ –º–∞—Å—Å—ã
    carbs = (calories - (protein * 4 + fat * 9)) / 4  # –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —É–≥–ª–µ–≤–æ–¥—ã

    return round(calories), round(protein), round(fat), round(carbs)



def show_result_screen():
    goal = user_data.get("goal")
    # –†–∞—Å—á—ë—Ç –ö–ë–ñ–£
    calories, protein, fat, carbs = calculate_kbju(user_data)


    kkal_info = ctk.CTkLabel(
        app,
        text=f"–í–∞—à–∞ –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:\n–ö–∞–ª–æ—Ä–∏–∏: {calories} –∫–∫–∞–ª\n–ë–µ–ª–∫–∏: {protein} –≥\n–ñ–∏—Ä—ã: {fat} –≥\n–£–≥–ª–µ–≤–æ–¥—ã: {carbs} –≥"
    )
    kkal_info.pack(pady=10)



    title = ctk.CTkLabel(app, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã", font=ctk.CTkFont(size=18, weight="bold"))
    title.pack(pady=10)





    if goal == "–†–µ–ª—å–µ—Ñ":
        recommend = ctk.CTkLabel(app, text="üí° –°–æ–≤–µ—Ç—ã: –£–≤–µ–ª–∏—á–∏–≤–∞–π –Ω–∞–≥—Ä—É–∑–∫—É, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–µ—Ç –ª–µ–≥–∫–æ")
        recommend.pack(pady=5)

        video = ctk.CTkLabel(
            app,
            text="üîó –í–∏–¥–µ–æ: https://www.youtube.com/results?search_query=—Ä–µ–ª—å–µ—Ñ+—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
            text_color="blue",
            cursor="hand2"
        )
        video.pack(pady=5)

        def open_video(event):
            import webbrowser
            webbrowser.open("https://www.youtube.com/results?search_query=—Ä–µ–ª—å–µ—Ñ+—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")

        video.bind("<Button-1>", open_video)

    elif goal == "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã" and user_data.get("support") == "–ü–∏—Ç–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏":
        support_recommend = ctk.CTkLabel(app, text="üèÉ‚Äç‚ôÇÔ∏è –°–æ–≤–µ—Ç: –ù–∞—á–Ω–∏ –±–µ–≥–∞—Ç—å, –æ—Ç–∂–∏–º–∞—Ç—å—Å—è –∏ –ø–æ–¥—Ç—è–≥–∏–≤–∞—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
        support_recommend.pack(pady=5)

    elif goal == "–ü–æ—Ö—É–¥–µ–Ω–∏–µ":
        note = ctk.CTkLabel(app, text="üìâ –ü—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π –ö–ë–ñ–£ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø–∏—Ç–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞")
        note.pack(pady=5)

    # ‚Äî‚Äî‚Äî –¢—Ä–µ–∫–µ—Ä –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –¥–µ–Ω—å ‚Äî‚Äî‚Äî

    entry_frame = ctk.CTkFrame(app)
    entry_frame.pack(pady=10)

    food_name = ctk.CTkEntry(entry_frame, placeholder_text="–ü—Ä–æ–¥—É–∫—Ç")
    food_name.grid(row=0, column=0, padx=5)

    cal_entry = ctk.CTkEntry(entry_frame, placeholder_text="–ö–∫–∞–ª")
    cal_entry.grid(row=0, column=1, padx=5)

    protein_entry = ctk.CTkEntry(entry_frame, placeholder_text="–ë")
    protein_entry.grid(row=0, column=2, padx=5)

    fat_entry = ctk.CTkEntry(entry_frame, placeholder_text="–ñ")
    fat_entry.grid(row=0, column=3, padx=5)

    carb_entry = ctk.CTkEntry(entry_frame, placeholder_text="–£")
    carb_entry.grid(row=0, column=4, padx=5)

    daily_log = []

    def save_log():
        total_cals = sum(item["calories"] for item in daily_log)
        total_p = sum(item["protein"] for item in daily_log)
        total_f = sum(item["fat"] for item in daily_log)
        total_c = sum(item["carbs"] for item in daily_log)

        log_data = {
            "date": datetime.now().strftime("%Y-%m-%d %H:%M"),
            "goal": goal,
            "products": daily_log,
            "total": {
                "calories": total_cals,
                "protein": total_p,
                "fat": total_f,
                "carbs": total_c
            }
        }

        try:
            with open("daily_log.json", "a", encoding="utf-8") as f:
                f.write(json.dumps(log_data, ensure_ascii=False) + "\n")
            print("–î–Ω–µ–≤–Ω–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", e)


    total_label = ctk.CTkLabel(app, text="–°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å:\n–ö–∫–∞–ª: 0 | –ë: 0 | –ñ: 0 | –£: 0")
    total_label.pack(pady=10)

    def update_summary():
        total_cals = sum(item["calories"] for item in daily_log)
        total_p = sum(item["protein"] for item in daily_log)
        total_f = sum(item["fat"] for item in daily_log)
        total_c = sum(item["carbs"] for item in daily_log)

        status = []
        if total_cals < calories:
            status.append("–ö–∫–∞–ª: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
        elif total_cals > calories:
            status.append("–ö–∫–∞–ª: –ø–µ—Ä–µ–±–æ—Ä")
        else:
            status.append("–ö–∫–∞–ª: –æ–∫")

        total_label.configure(
            text=f"–°—É–º–º–∞ –∑–∞ –¥–µ–Ω—å:\n–ö–∫–∞–ª: {total_cals} | –ë: {total_p} | –ñ: {total_f} | –£: {total_c}\n" +
                 " | ".join(status)
        )

    def add_food():
        try:
            item = {
                "name": food_name.get(),
                "calories": int(cal_entry.get()),
                "protein": int(protein_entry.get()),
                "fat": int(fat_entry.get()),
                "carbs": int(carb_entry.get())
            }
            daily_log.append(item)
            update_summary()

            
            food_name.delete(0, "end")
            cal_entry.delete(0, "end")
            protein_entry.delete(0, "end")
            fat_entry.delete(0, "end")
            carb_entry.delete(0, "end")
        except ValueError:
            print("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ö–ë–ñ–£")

    def check_kbju():
        total_cals = sum(item["calories"] for item in daily_log)
        total_p = sum(item["protein"] for item in daily_log)
        total_f = sum(item["fat"] for item in daily_log)
        total_c = sum(item["carbs"] for item in daily_log)

        messages = []

        def compare(actual, target, name):
            if actual < target * 0.9:
                return f"{name}:  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫"
            elif actual > target * 1.1:
                return f"{name}:  –ü–µ—Ä–µ–±–æ—Ä"
            else:
                return f"{name}:  –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã"

        messages.append(compare(total_cals, calories, "–ö–∫–∞–ª"))
        messages.append(compare(total_p, protein, "–ë–µ–ª–∫–∏"))
        messages.append(compare(total_f, fat, "–ñ–∏—Ä—ã"))
        messages.append(compare(total_c, carbs, "–£–≥–ª–µ–≤–æ–¥—ã"))

        result = "\n".join(messages)

        result_window = ctk.CTkToplevel(app)
        result_window.title("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–Ω—è")
        result_window.geometry("300x200")

        msg = ctk.CTkLabel(result_window, text=result, font=ctk.CTkFont(size=14))
        msg.pack(pady=20)


    def show_history():
        try:
            with open("daily_log.json", "r", encoding="utf-8") as f:
                logs = [json.loads(line.strip()) for line in f.readlines()]
        except FileNotFoundError:
            logs = []

        history_window = ctk.CTkToplevel(app)
        history_window.title("–ò—Å—Ç–æ—Ä–∏—è")
        history_window.geometry("400x300")

        if not logs:
            no_data = ctk.CTkLabel(history_window, text="–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.", font=ctk.CTkFont(size=14))
            no_data.pack(pady=20)
            return

        for entry in logs[-10:]: 
            date = entry["date"]
            total = entry["total"]
            line = f"{date} | –ö: {total['calories']} –ë: {total['protein']} –ñ: {total['fat']} –£: {total['carbs']}"
            label = ctk.CTkLabel(history_window, text=line, anchor="w")
            label.pack(anchor="w", padx=10)


    if goal in ["–†–µ–ª—å–µ—Ñ", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"]:
        show_tips_and_links(goal)

    add_button = ctk.CTkButton(app, text="–î–æ–±–∞–≤–∏—Ç—å –≤ –¥–Ω–µ–≤–Ω–∏–∫", command=add_food)
    add_button.pack()
    save_button = ctk.CTkButton(app, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å", command=save_log)
    save_button.pack(pady=5)
    check_button = ctk.CTkButton(app, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", command=check_kbju)
    check_button.pack(pady=5)
    history_button = ctk.CTkButton(app, text="–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", command=show_history)
    history_button.pack(pady=5)

def show_tips_and_links(goal):
    tips_window = ctk.CTkToplevel(app)
    tips_window.title("–°–æ–≤–µ—Ç—ã –∏ –í–∏–¥–µ–æ")
    tips_window.geometry("400x300")
    if goal == "–†–µ–ª—å–µ—Ñ":
        tips_text = (
            "–°–æ–≤–µ—Ç—ã –¥–ª—è —Ä–µ–ª—å–µ—Ñ–∞:\n"
            "- –£–¥–≤–∞–∏–≤–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ–≥–¥–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ª–µ–≥–∫–æ\n"
            "- –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n\n"
            "–í–∏–¥–µ–æ:\n"
            "https://www.youtube.com/watch?v=example1\n"
            "https://www.youtube.com/watch?v=example2"
        )
    elif goal == "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ":
        tips_text = (
            "–°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–æ—Ä–º—ã:\n"
            "- –ù–∞—á–Ω–∏ –±–µ–≥–∞—Ç—å –ø–æ —É—Ç—Ä–∞–º\n"
            "- –ü–æ–¥—Ç—è–≥–∏–≤–∞–π—Å—è –∏ –æ—Ç–∂–∏–º–∞–π—Å—è\n"
            "- –°—Ç–∞—Ä–∞–π—Å—è –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å"
        )
    else:
        tips_text = "–°–æ–≤–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ü–µ–ª–∏ –Ω–µ—Ç."
    label = ctk.CTkLabel(tips_window, text=tips_text, justify="left", font=ctk.CTkFont(size=14))
    label.pack(padx=20, pady=20)




def show_input_fields(goal):

    input_label = ctk.CTkLabel(app, text="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:", font=ctk.CTkFont(size=16, weight="bold"))
    input_label.pack(pady=10)

    
    gender_label = ctk.CTkLabel(app, text="–ü–æ–ª:")
    gender_label.pack()
    gender_option = ctk.CTkOptionMenu(app, values=["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
    gender_option.pack(pady=5)

    
    weight_label = ctk.CTkLabel(app, text="–í–µ—Å (–∫–≥):")
    weight_label.pack()
    weight_entry = ctk.CTkEntry(app)
    weight_entry.pack(pady=5)

    
    height_label = ctk.CTkLabel(app, text="–†–æ—Å—Ç (—Å–º):")
    height_label.pack()
    height_entry = ctk.CTkEntry(app)
    height_entry.pack(pady=5)

    
    body_type_label = ctk.CTkLabel(app, text="–¢–∏–ø —Ç–µ–ª–∞:")
    body_type_label.pack()
    body_type_option = ctk.CTkOptionMenu(app, values=["–•—É–¥–æ—â–∞–≤—ã–π (—É–∑–∫–∞—è –∫–æ—Å—Ç—å)", "–®–∏—Ä–æ–∫–∞—è –∫–æ—Å—Ç—å"])
    body_type_option.pack(pady=5)

    
    age_label = ctk.CTkLabel(app, text="–í–æ–∑—Ä–∞—Å—Ç:", font=ctk.CTkFont(size=14))
    age_label.pack(pady=(10, 2))
    age_entry = ctk.CTkEntry(app)
    age_entry.pack(pady=(0, 10))


    if goal == "–†–µ–ª—å–µ—Ñ":
        activity_label = ctk.CTkLabel(app, text="–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:")
        activity_label.pack()
        activity_option = ctk.CTkOptionMenu(app, values=["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "3‚Äì4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", "1‚Äì2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"])
        activity_option.pack(pady=5)

    elif goal == "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ":
        support_label = ctk.CTkLabel(app, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
        support_label.pack()
        support_option = ctk.CTkOptionMenu(app, values=["–¢–æ–ª—å–∫–æ –ø–∏—Ç–∞–Ω–∏–µ", "–ü–∏—Ç–∞–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"])
        support_option.pack(pady=5)



    
    continue_button = ctk.CTkButton(app, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", command=lambda: save_user_input(
        gender_option.get(),
        weight_entry.get(),
        height_entry.get(),
        body_type_option.get(),
        age_entry.get(),
        support_option.get() if goal == "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã" else None,
        activity_option.get() if goal == "–†–µ–ª—å–µ—Ñ" else None
    ))
    continue_button.pack(pady=15)






def select_goal(goal):
    
        label.pack_forget()
        button1.pack_forget()
        button2.pack_forget()
        button3.pack_forget()

   
        user_data["goal"] = goal


        show_input_fields(goal)
        result_label = ctk.CTkLabel(app, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {goal}", font=ctk.CTkFont(size=18, weight="bold"))
        result_label.pack(pady=20)





label = ctk.CTkLabel(app, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ü–µ–ª—å", font=ctk.CTkFont(size=18, weight="bold"))
label.pack(pady=20)


button1 = ctk.CTkButton(app, text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ", command=lambda: select_goal("–ü–æ—Ö—É–¥–µ–Ω–∏–µ"))
button1.pack(pady=10)

button2 = ctk.CTkButton(app, text="–†–µ–ª—å–µ—Ñ", command=lambda: select_goal("–†–µ–ª—å–µ—Ñ"))
button2.pack(pady=10)

button3 = ctk.CTkButton(app, text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã", command=lambda: select_goal("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ"))
button3.pack(pady=10)



app.mainloop()